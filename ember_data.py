import numpy as np
import os
from sklearn.preprocessing import LabelBinarizer, StandardScaler, MinMaxScaler
import matplotlib.cm as cm
import matplotlib.pyplot as plt
from tqdm import tqdm

class EMBER(object):
    def __init__(self):
        self.labelBin=None

    def loadData(self, data_dir = 'data/ember',subset=None,feature_version=2):
        """
        Read vectorized features into memory mapped numpy arrays
        """
        if subset is not None and subset not in ["train", "test"]:
            return None
        
        ndim = 2381 # default feature version2
        X_train = None
        y_train = None
        X_test = None
        y_test = None

        if subset is None or subset == "train":
            #modify fX_train, fY_train
            X_train_path = os.path.join(data_dir, "fX_train.dat")
            y_train_path = os.path.join(data_dir, "tL2fy_train.dat")
            y_train = np.memmap(y_train_path, dtype=np.float32, mode="r", shape=(600000,2))
            N = y_train.shape[0]
            X_train = np.memmap(X_train_path, dtype=np.float32, mode="r", shape=(N, ndim))
            print "Loading X train, Y train"
            print("X train shape: ", X_train.shape)
            print("Y train shape: ", y_train.shape)
            if subset == "train":
                return X_train, y_train

        if subset is None or subset == "test":
            X_test_path = os.path.join(data_dir, "X_test.dat")
            y_test_path = os.path.join(data_dir, "y_test.dat")
            y_test = np.memmap(y_test_path, dtype=np.float32, mode="r")
            N = y_test.shape[0]
            X_test = np.memmap(X_test_path, dtype=np.float32, mode="r", shape=(N, ndim))
            print "Loading X test, Y test"
            print("X test shape: ", X_test.shape)
            print("Y test shape: ", y_test.shape)
            if subset == "test":
                return X_test, y_test

        return X_train, y_train, X_test, y_test

    #transform 1-column numpy array 0 and 1 into 2 column
    def transformLabel(self, trainY):
        self.labelBin=LabelBinarizer()
        self.labelBin.fit(trainY)
        return self.labelBin.transform(trainY)

    def inverseTransformLabel(self, binTrainY, set=False):
        if set:
            return binTrainY.argmax(axis=1)
        else:
            return binTrainY.argmax(axis=0)
    
    def visualize(self, example):
        pass

    def filterUnlabeled(self, trainX, trainY):
        train_rows = (trainY != -1)
        trainX, trainY = trainX[train_rows], trainY[train_rows]
        return trainX, trainY


def binarize(X, threshold = 0.5): #X could be an array
    X = X>threshold
    return X

#Transform data into floats from [0.0;1.0] this function has error when np.max(X,0)=0, that data returned will be very large
def scale(X):
    X=np.asarray(X, 'float32')
    # if (int(np.max(X, 0))==0):
    #     return 0
    data = (X - np.min(X, 0)) / ( np.max(X, 0) + 0.00001 )
    return data

def otf():
    data_path= "ember\data"
    dataobj=EMBER()
    trainX, trainY = dataobj.loadData(data_path,"train")
    testX , testY  = dataobj.loadData(data_path,"test")
    # run one time only to save filtered data and scale data
    print "filtering trainX and trainY"
    trainX, trainY = dataobj.filterUnlabeled(trainX, trainY)
    print "trainX.shape: ", trainX.shape, " trainY.shape: ", trainY.shape
    ftrainX_path  = os.path.join(data_path, "fX_train.dat")
    ftrainY_path  = os.path.join(data_path, "fy_train.dat")
    print "allocating space"
    ftrainX  = np.memmap(ftrainX_path,dtype=np.float32, mode = "w+",shape=trainX.shape)
    ftrainY  = np.memmap(ftrainY_path,dtype=np.float32, mode = "w+",shape=trainY.shape)
    print "write to memmap space"
    ftrainX[:], ftrainY[:] = trainX[:], trainY[:]
    del ftrainX,ftrainY
    print "memmory deleted"

    print "allocating space for scaling"
    sftrainX_path = os.path.join(data_path, "sfX_train.dat")
    stestX_path   = os.path.join(data_path, "sX_test.dat")
    sftrainX = np.memmap(sftrainX_path,dtype=np.float32, mode = "w+",shape=trainX.shape)
    stestX   = np.memmap(stestX_path,dtype=np.float32, mode = "w+",shape=testX.shape)
    print "write to sftrainX"
    for i in tqdm(range(int(len(trainX[0])))): #0-60000
        # if i%100==0:
        #     print "train index: ",i," ", trainX[:,i].shape
        sftrainX[:,i] = scale(trainX[:,i])
    print "write to stestX"
    for i in tqdm(range(int(len(testX[0])))): #0-60000
        # if i%100==0:
        #     print "test index: ", i, " ", testX[:,i].shape
        stestX[:,i] = scale(testX[:,i])
    print "memmory deleted"
    del sftrainX, stestX
    #After finishing running the data, change name in EMBER().loadData

def otf_stdScale():
    # fixed: scaler should be the same for train and test
    data_path= "data\ember"
    dataobj=EMBER()
    
    ftrainX, ftrainY = dataobj.loadData(data_path,"train")
    testX , testY  = dataobj.loadData(data_path,"test")

    print "Computing stdftrainX"
    
    scaler= StandardScaler().fit(ftrainX)
    stdftrainX = scaler.transform(ftrainX)

    # print "Scaler mean:", scaler.mean_
    # print "Scaler std:", scaler.var_
    print "Computing stdtestX"
    print "stdftrainX shape:", stdftrainX.shape
    # scaler2 = StandardScaler().fit(testX) # Wrong, deleted
    stdtestX = scaler.transform(testX)
    print "stdtestX shape:", stdtestX.shape
    print "allocating space for scaling"
    stdftrainX_path = os.path.join(data_path, "stdfX_train.dat")
    stdtestX_path   = os.path.join(data_path, "stdX_test.dat")
    stdftrainX_mem = np.memmap(stdftrainX_path,dtype=np.float32, mode = "w+",shape=ftrainX.shape)
    stdtestX_mem   = np.memmap(stdtestX_path,dtype=np.float32, mode = "w+",shape=testX.shape)
    
    print "writing to stdftrainX_mem"
    stdftrainX_mem[:]=stdftrainX[:]
    print "writing to stdtestX_mem"
    stdtestX_mem[:]=stdtestX[:]

    print "Delete memmory space"
    del stdftrainX_mem, stdtestX_mem

    print "Computing binarize"
    bstdftrainX = binarize(stdftrainX, 0)
    bstdtestX = binarize(stdtestX,0)

    print "allocating space for binarizing"
    bstdftrainX_path = os.path.join(data_path, "bstdfX_train.dat")
    bstdtestX_path   = os.path.join(data_path, "bstdX_test.dat")
    bstdftrainX_mem = np.memmap(bstdftrainX_path,dtype=np.float32, mode = "w+",shape=ftrainX.shape)
    bstdtestX_mem   = np.memmap(bstdtestX_path,dtype=np.float32, mode = "w+",shape=testX.shape)
    
    print "writing to bstdftrainX_mem"
    bstdftrainX_mem[:]=bstdftrainX[:]
    print "writing to bstdtestX_mem"
    bstdtestX_mem[:]=bstdtestX[:]

    print "Delete memmory space"
    del bstdftrainX_mem, bstdtestX_mem

def otf_minmaxScale():
    #This function is the second option of the data preprosessing,
    # We apply a Minmax scaler with default settings and fit ftrainX
    # use that scaler to transform ftrainX
    # second : mmftrainX --> JRBM (use the same scaler(1) to test)
    data_path= "data\ember"
    dataobj=EMBER()
    
    ftrainX, ftrainY = dataobj.loadData(data_path,"train") 
    testX , testY  = dataobj.loadData(data_path,"test")
    
    print "Computing mmftrainX"
    scaler= MinMaxScaler().fit(ftrainX)
    mmftrainX = scaler.transform(ftrainX)
    
    print "Computing mmtestX"
    print "mmftrainX shape:", mmftrainX.shape
    # scaler2 = MinMaxScaler().fit(testX) #Wrong, deleted
    mmtestX = scaler.transform(testX)
    print "mmtestX shape:", mmtestX.shape
    print "allocating space for scaling"
    mmftrainX_path = os.path.join(data_path, "mmfX_train.dat")
    mmtestX_path   = os.path.join(data_path, "mmX_test.dat")
    mmftrainX_mem = np.memmap(mmftrainX_path,dtype=np.float32, mode = "w+",shape=ftrainX.shape)
    mmtestX_mem   = np.memmap(mmtestX_path,dtype=np.float32, mode = "w+",shape=testX.shape)
    
    print "writing to mmftrainX_mem"
    mmftrainX_mem[:]=mmftrainX[:]
    print "writing to mmtestX_mem"
    mmtestX_mem[:]=mmtestX[:]

    print "Delete memmory space"
    del mmftrainX_mem, mmtestX_mem


    print "Computing binarize"
    bmmftrainX = binarize(mmftrainX, 0.5)
    bmmtestX = binarize(mmtestX,0.5)

    print "allocating space for binarizing"
    bmmftrainX_path = os.path.join(data_path, "bmmfX_train.dat")
    bmmtestX_path   = os.path.join(data_path, "bmmX_test.dat")
    bmmftrainX_mem = np.memmap(bmmftrainX_path,dtype=np.float32, mode = "w+",shape=ftrainX.shape)
    bmmtestX_mem   = np.memmap(bmmtestX_path,dtype=np.float32, mode = "w+",shape=testX.shape)
    
    print "writing to bmmftrainX_mem"
    bmmftrainX_mem[:]=bmmftrainX[:]
    print "writing to bmmtestX_mem"
    bmmtestX_mem[:]=bmmtestX[:]

    print "Delete memmory space"
    del bmmftrainX_mem, bmmtestX_mem

def otf_mmstdScale():
    #This function is the third option of data preprosessing
    # third:
    # scaler2= MinMaxScaler().fit(stdftrainX)
    # mmftrainX = scaler2.transform(stdftrainX)
    data_path= "data\ember"
    dataobj=EMBER()
    
    ftrainX, ftrainY = dataobj.loadData(data_path,"train")
    testX , testY  = dataobj.loadData(data_path,"test")

    print "Computing stdftrainX"
    
    scaler= StandardScaler().fit(ftrainX)
    stdftrainX = scaler.transform(ftrainX)
    scalermm = MinMaxScaler().fit(stdftrainX)
    mmstdftrainX = scalermm.transform(stdftrainX)

    print "Scaler mean:", scaler.mean_
    print "Scaler std:", scaler.var_
    print "mmstdftrainX shape:", mmstdftrainX.shape
    print "Computing mmstdtestX: "
    # scaler2 = StandardScaler().fit(testX) # Wrong, deleted
    stdtestX = scaler.transform(testX)
    mmstdtestX = scalermm.transform(stdtestX)

    print "mmstdtestX shape:", mmstdtestX.shape
    print "allocating space for scaling"
    mmstdftrainX_path = os.path.join(data_path, "mmstdfX_train.dat")
    mmstdtestX_path   = os.path.join(data_path, "mmstdX_test.dat")
    mmstdftrainX_mem = np.memmap(mmstdftrainX_path,dtype=np.float32, mode = "w+",shape=ftrainX.shape)
    mmstdtestX_mem   = np.memmap(mmstdtestX_path,dtype=np.float32, mode = "w+",shape=testX.shape)
    
    print "writing to mmstdftrainX_mem"
    mmstdftrainX_mem[:]=mmstdftrainX[:]
    print "writing to mmstdtestX_mem"
    mmstdtestX_mem[:]=mmstdtestX[:]

    print "Delete memmory space"
    del mmstdftrainX_mem, mmstdtestX_mem

    print "Computing binarize"
    bmmstdftrainX = binarize(mmstdftrainX, 0)
    bmmstdtestX = binarize(mmstdtestX,0)

    print "allocating space for binarizing"
    bmmstdftrainX_path = os.path.join(data_path, "bmmstdfX_train.dat")
    bmmstdtestX_path   = os.path.join(data_path, "bmmstdX_test.dat")
    bmmstdftrainX_mem = np.memmap(bmmstdftrainX_path,dtype=np.float32, mode = "w+",shape=ftrainX.shape)
    bmmstdtestX_mem   = np.memmap(bmmstdtestX_path,dtype=np.float32, mode = "w+",shape=testX.shape)
    
    print "writing to bmmstdftrainX_mem"
    bmmstdftrainX_mem[:]=bmmstdftrainX[:]
    print "writing to bmmstdtestX_mem"
    bmmstdtestX_mem[:]=bmmstdtestX[:]

    print "Delete memmory space"
    del bmmstdftrainX_mem, bmmstdtestX_mem


def otf_transformLabel_1col():
    data_path='data\ember'
    dataobj=EMBER()
    ftrainX, ftrainY = dataobj.loadData(data_path,"train")
    tLtrainY_path=os.path.join(data_path,"tL1fy_train.dat")
    ny=dataobj.transformLabel(ftrainY)
    tLtrainY=np.memmap(tLtrainY_path,dtype= np.float32, mode="w+", shape=ny.shape)
    tLtrainY[:]=ny[:]
    del tLtrainY

def otf_transformLabel_2col():
    data_path="data\ember"
    ftrainX, ftrainY = EMBER().loadData(data_path,"train")
    tLtrainY_path=os.path.join(data_path,"tL2fy_train.dat")
    tLtrainY=np.memmap(tLtrainY_path,dtype= np.float32, mode="w+", shape=(int(ftrainY.shape[0]),2))
    print (int(ftrainY.shape[0]),2)
    for i in tqdm(range(int(ftrainY.shape[0]))):
        if int(ftrainY[i])==1:
            tLtrainY[i]=np.array([0,1])
        elif int(ftrainY[i])==0:
            tLtrainY[i]=np.array([1,0])
        else:
            print "error: ", i
    del tLtrainY



def mse():
    mse= [ 0., 14.37105989,3.47082054,3.35178718,3.34876958,3.3481149
        ,3.34783381,3.34771843,3.34761119,3.34755707,3.34751773,3.34748296
        ,3.34747955,3.34745045,3.34743513,3.34743897,3.34744436,3.34744105
        ,3.34743119,3.347396,3.34740162,3.34742764,3.34742288,3.34744994
        ,3.34743669,3.3474243, 3.3474169, 3.34744257,3.3474362, 3.34741577
        ,3.34741839,3.34739149,3.34740144,3.34742331,3.34742574,3.34741714
        ,3.34741244,3.34740813,3.3474062, 3.34740346,3.34741208,3.34739002
        ,3.34740404,3.34739292,3.34743091,3.34742089,3.34737516,3.3474023
        ,3.34741726,3.34741751,3.3473851]
    mse_plot(mse, "JRBM_mmstdf128.png")
    mse = [ 0., 10.49778568,3.43503254,3.36798009,3.36753057,3.36740417
        ,3.36846274,3.37068053,3.36995271,3.3675317, 3.36542449,3.36585949
        ,3.36448541,3.36195969,3.36225969,3.35963435,3.35959338,3.35986408
        ,3.35887512,3.35461502,3.35433059,3.35928157,3.36079041,3.35934784
        ,3.35657629,3.35484473,3.35732276,3.35865897,3.35924693,3.35765486
        ,3.35772502,3.3516978, 3.35126846,3.35103619,3.34871892,3.34657826
        ,3.34832491,3.34708433,3.34054564,3.33077579,3.32872163,3.30897203
        ,3.29032859,3.27322182,3.24557129,3.22222065,3.18859964,3.16380615
        ,3.1285991, 3.09731002,3.07485732]
    mse_plot(mse, "JRBM_mmstdf256.png")
    mse = [ 0., 13.7443577, 3.83691571,3.63193942,3.60697747,3.59103184
        ,3.57730879,3.56317722,3.5539299, 3.54912091,3.54845318,3.53853914
        ,3.53088516,3.52957932,3.52301712,3.5194936, 3.51824826,3.51071251
        ,3.50664053,3.5062468, 3.50863631,3.501751,3.49893269,3.48874001
        ,3.48975954,3.49064651,3.47772344,3.46497742,3.4696007, 3.46603997
        ,3.46493577,3.45824112,3.45844205,3.45526984,3.45525237,3.451269
        ,3.44966118,3.44509939,3.44245706,3.43969105,3.43994765,3.44022499
        ,3.44290498,3.44322317,3.43976951,3.43913434,3.43757671,3.43019913
        ,3.43043393,3.42536584,3.42663872]
    mse_plot(mse, "JRBM_mmstdf512.png")
    mse = [ 0., 19.5137795, 4.93783945,4.27491081,4.19088769,4.13127396
        ,4.09834775,4.05784056,4.03515712,4.00813459,3.98314751,3.95538019
        ,3.94379083,3.91527935,3.89512005,3.87899781,3.86388473,3.85312705
        ,3.8429686, 3.82494165,3.8203298, 3.82055697,3.80911278,3.80674225
        ,3.79346519,3.7760772, 3.76972747,3.76671078,3.76379143,3.75465221
        ,3.74454127,3.73225144,3.72789807,3.72560662,3.72103684,3.71343246
        ,3.70786522,3.69774279,3.69241891,3.68682596,3.67352214,3.668973
        ,3.66828655,3.66002514,3.66315616,3.66240919,3.65739932,3.65544504
        ,3.65547488,3.65818033,3.65227884]
    mse_plot(mse, "JRBM_mmstdf1024.png")



    mse = [0., 204.268,134.93748,129.9646748,128.18604675
        ,127.22406047, 126.7842406,126.26624241, 125.95436242, 125.72164362
        ,125.66471644, 125.50254716, 125.32462547, 125.23174625, 125.18681746
        ,125.10656817, 125.04236568, 125.00862366, 124.97338624, 124.87203386
        ,124.93102034, 124.8748102,124.8008481,124.81370848, 124.76223708
        ,124.70262237, 124.64622622, 124.73326226, 124.59843262, 124.63468433
        ,124.66904684, 124.62889047, 124.6270889,124.68697089, 124.67846971
        ,124.6414847,124.65001485, 124.48810015, 124.483481, 124.47903481
        ,124.54129035, 124.4473129,124.52947313, 124.49959473, 124.52139595
        ,124.62341396, 124.62493414, 124.56354934, 124.54883549, 124.40138835
        ,124.57061388]
    mse_plot(mse, "JRBM_bmmstdf128.png")
    mse = [0.,171.6984,129.263184,126.68663184,125.24326632
        ,123.67703266,122.68177033,121.4624177,120.26362418,119.43143624
        ,118.65191436,117.91451914,117.02574519,116.44965745,115.81269657
        ,115.14412697,114.65524127,114.22175241,113.66181752,113.13741818
        ,112.97677418,112.39736774,112.47637368,112.04036374,111.86540364
        ,111.39705404,111.16297054,111.28442971,110.9858443,110.79665844
        ,110.82656658,110.64646567,110.56726466,110.38227265,110.37342273
        ,110.25013423,110.09330134,110.52653301,110.44046533,110.29580465
        ,110.12575805,110.14105758,110.03061058,110.29830611,110.20418306
        ,110.11364183,110.04233642,110.10642336,110.05166423,109.67991664
        ,109.72159917]
    mse_plot(mse, "JRBM_bmmstdf256.png")
    mse = [0.,177.2572,130.402344,127.71644688,126.40232894
        ,126.03284658,125.70225693,125.71484514,125.6010969,125.35642194
        ,125.45632844,125.40792657,125.20735853,125.24414717,125.17408294
        ,124.88828166,125.01496563,124.90589931,125.00891799,125.28337836
        ,124.94166757,124.91803335,125.09476067,125.05749521,124.9163499
        ,124.924327,124.89048654,125.06940973,125.11698819,125.03153976
        ,124.5606308,124.39281262,124.02345625,123.81966913,123.35399338
        ,122.68867987,122.4913736,122.11822747,121.79436455,121.14388729
        ,120.80847775,120.43056955,120.10061139,119.78681223,119.47093624
        ,119.05421872,118.83588437,118.40551769,118.09051035,117.64461021
        ,117.5536922]
    mse_plot(mse, "JRBM_bmmstdf512.png")
    mse = [0.,186.3672,133.122688,129.25450752,128.1725803
        ,127.61890321,127.45195613,127.07247825,127.02049913,126.69601997
        ,126.6286408,126.60514563,126.01380583,125.88295223,125.26331809
        ,124.90333272,123.84413331,123.72816533,123.43072661,122.99002906
        ,121.85240116,121.21329605,120.80773184,119.97150927,119.13886037
        ,118.52395441,118.29775818,117.49191033,116.67487641,115.46299506
        ,114.8489198,114.36835679,113.57793427,112.38871737,112.24434869
        ,111.40017395,110.79360696,110.17494428,109.61419777,109.52616791
        ,108.29704672,108.35908187,107.84876327,107.14675053,106.33147002
        ,106.1884588,105.86273835,105.08490953,104.52019638,104.26480786
        ,103.70659231]
    mse_plot(mse, "JRBM_bmmstdf1024.png")



    mse = [ 0., 14.47463075,3.47185859,3.35179158,3.34877798,3.34812002
        ,3.34785398,3.34769004,3.34759868,3.34756615,3.34754921,3.34747886
        ,3.34748384,3.34745751,3.34746595,3.34742171,3.34744874,3.34743342
        ,3.34742029,3.34743344,3.34739875,3.34742154,3.3474303, 3.34741325
        ,3.34739791,3.34740636,3.34739938,3.3474157, 3.34741029,3.34741625
        ,3.34737566,3.34739322,3.34739929,3.34740247,3.3473997, 3.3473955
        ,3.34741491,3.34740281,3.34738426,3.34738438,3.34738426,3.34736651
        ,3.34739576,3.34739482,3.34740208,3.34736722,3.34735906,3.34738449
        ,3.34736947,3.34738248,3.34737164]
    mse_plot(mse, "JRBM_mmf128.png")
    mse = [ 0., 10.58865332,3.43729736,3.36455599,3.36466481,3.36629684
        ,3.36575858,3.36412402,3.36611215,3.37034995,3.36931039,3.36846954
        ,3.36411991,3.3648221, 3.36340396,3.36431701,3.36403369,3.36325904
        ,3.35874233,3.35741905,3.36162215,3.36177579,3.36064607,3.36145605
        ,3.3613023, 3.36190325,3.36086386,3.36011676,3.35791691,3.36270843
        ,3.35722819,3.35227501,3.35411029,3.3519424, 3.34995299,3.3492875
        ,3.34070822,3.33446916,3.33002672,3.30932071,3.29255822,3.26809493
        ,3.24379192,3.20998998,3.18318178,3.15805777,3.11971263,3.10213551
        ,3.07620387,3.04790264,3.02259266]
    mse_plot(mse, "JRBM_mmf256.png")
    mse = [ 0., 13.77736485,3.83459154,3.61261253,3.60174569,3.59571332
        ,3.58477922,3.57713, 3.56861583,3.55483102,3.55519652,3.54594126
        ,3.53548852,3.52287521,3.51698978,3.51022816,3.50566003,3.49955452
        ,3.49678411,3.49510922,3.48559533,3.4884648, 3.49468949,3.48597702
        ,3.47585941,3.47518537,3.47983662,3.47723341,3.47564277,3.46900789
        ,3.46705946,3.46330779,3.46232596,3.46438246,3.46268058,3.45808213
        ,3.45941644,3.4549427, 3.45009993,3.45166566,3.45143811,3.45239011
        ,3.45162754,3.44930922,3.44607091,3.44475266,3.44410827,3.4431936
        ,3.4413496, 3.44294555,3.43940424]
    mse_plot(mse, "JRBM_mmf512.png")
    mse = [ 0., 19.6254147, 4.92051117,4.25480175,4.17296562,4.13323031
        ,4.0971103, 4.06640595,4.02875623,3.99592561,3.97820137,3.95628398
        ,3.9404051, 3.93686525,3.91016794,3.90072259,3.87976381,3.86339634
        ,3.84515347,3.83441942,3.82493457,3.81780222,3.80970138,3.81258912
        ,3.80907962,3.78816257,3.77189517,3.75785037,3.76134073,3.75304179
        ,3.75132382,3.74355048,3.73373529,3.7294775, 3.70448628,3.70640916
        ,3.70402137,3.70043801,3.69943934,3.69318596,3.68879817,3.69073499
        ,3.68651885,3.67492863,3.67079209,3.67319763,3.67028525,3.66522913
        ,3.66278057,3.65493214,3.64675103]
    mse_plot(mse, "JRBM_mmf1024.png")

    mse = [0., 111.5665,27.904065,21.83744065,19.67417441
        ,18.58544174,17.80135442,17.30601354,17.00976014,16.7039976
        ,16.48773998,16.3050774, 16.15415077,16.02244151,15.90662442
        ,15.81296624,15.75932966,15.7272933, 15.67597293,15.62795973
        ,15.5533796, 15.5377338, 15.45027734,15.42170277,15.36421703
        ,15.40154217,15.33891542,15.31588915,15.30465889,15.26804659
        ,15.24658047,15.2718658, 15.27201866,15.19662019,15.1409662
        ,15.18120966,15.1698121, 15.15929812,15.18039298,15.15760393
        ,15.09857604,15.09908576,15.08549086,15.07315491,15.04733155
        ,15.11477332,15.07784773,15.08027848,15.07970278,15.06649703
        ,15.06886497]
    mse_plot(mse, "JRBM_bmmf128.png")

    mse = [0.,72.5032,21.067432,18.07767432,16.99977674,16.43539777
        ,16.05255398,15.83932554,15.63679326,15.45776793,15.36357768,15.34423578
        ,15.24844236,15.20988442,15.11829884,15.12698299,15.00426983,15.0594427
        ,14.98719443,15.02587194,14.94225872,14.94922259,14.96469223,14.97164692
        ,14.86551647,14.86585516,14.83965855,14.84319659,14.84603197,14.82426032
        ,14.7970426,14.84757043,14.7786757,14.79238676,14.74272387,14.80482724
        ,14.78824827,14.76488248,14.75924882,14.75339249,14.75393392,14.70273934
        ,14.67182739,14.75611827,14.67896118,14.76338961,14.7346339,14.68854634
        ,14.72328546,14.76343285,14.79663433]
    mse_plot(mse, "JRBM_bmmf256.png")
    mse = [0.,78.0736,21.742272,18.27644544,17.21072891,16.61341458
        ,16.22946829,16.15578937,15.84711579,15.73214232,15.70224285,15.62724486
        ,15.5525449,15.4118509,15.45383702,15.34307674,15.26966153,15.29179323
        ,15.35703586,15.27874072,15.30797481,15.2725595,15.22385119,15.20687702
        ,15.22693754,15.14053875,15.13601078,15.11592022,15.1295184,15.16139037
        ,15.10402781,15.11728056,15.11954561,15.02279091,15.04645582,15.08692912
        ,15.03733858,14.98594677,15.04971894,15.02699438,15.06133989,15.0724268
        ,15.03344854,15.07226897,15.07464538,15.05469291,15.03349386,14.92906988
        ,14.9681814,15.02176363,14.96963527]
    mse_plot(mse, "JRBM_bmmf512.png")
    mse = [0.,90.7112,23.543648,18.51294592,17.49011784,17.11960471
        ,16.73758419,16.51270337,16.38530813,16.19141233,15.98765649,16.06030626
        ,15.98721225,15.94588849,15.99543554,15.84621742,15.7794487,15.74637795
        ,15.79865512,15.5695462,15.62918185,15.67796727,15.63351869,15.61974075
        ,15.56478963,15.57379159,15.54615166,15.66904607,15.60276184,15.46891047
        ,15.48755642,15.51950226,15.57598009,15.5230392,15.57372157,15.46214886
        ,15.42568595,15.49222744,15.3372891,15.43589156,15.43743566,15.46309743
        ,15.4745239,15.42698096,15.37787924,15.49031517,15.39641261,15.4910565
        ,15.38604226,15.38344169,15.37373767]
    mse_plot(mse, "JRBM_bmmf1024.png")


    mse = [0.00000000e+00,2.08025341e+18,2.10105594e+18,2.10126397e+18
        ,2.10126605e+18,2.10126607e+18,2.10126607e+18,2.10126607e+18
        ,2.10126607e+18,2.10126607e+18,2.10126607e+18,2.10126607e+18
        ,2.10126607e+18,2.10126607e+18,2.10126607e+18,2.10126607e+18
        ,2.10126607e+18,2.10126607e+18,2.10126607e+18,2.10126607e+18
        ,2.10126607e+18,2.10126607e+18,2.10126607e+18,2.10126607e+18
        ,2.10126607e+18,2.10126607e+18,2.10126607e+18,2.10126607e+18
        ,2.10126607e+18,2.10126607e+18,2.10126607e+18,2.10126607e+18
        ,2.10126607e+18,2.10126607e+18,2.10126607e+18,2.10126607e+18
        ,2.10126607e+18,2.10126607e+18,2.10126607e+18,2.10126607e+18
        ,2.10126607e+18,2.10126607e+18,2.10126607e+18,2.10126607e+18
        ,2.10126607e+18,2.10126607e+18,2.10126607e+18,2.10126607e+18
        ,2.10126607e+18,2.10126607e+18,2.10126607e+18]
    mse_plot(mse, "JRBM_f128.png")
    mse = [0.00000000e+00,2.06805109e+18,2.08873160e+18,2.08893840e+18
        ,2.08894047e+18,2.08894049e+18,2.08894049e+18,2.08894049e+18
        ,2.08894049e+18,2.08894049e+18,2.08894049e+18,2.08894049e+18
        ,2.08894049e+18,2.08894049e+18,2.08894049e+18,2.08894049e+18
        ,2.08894049e+18,2.08894049e+18,2.08894049e+18,2.08894049e+18
        ,2.08894049e+18,2.08894049e+18,2.08894049e+18,2.08894049e+18
        ,2.08894049e+18,2.08894049e+18,2.08894049e+18,2.08894049e+18
        ,2.08894049e+18,2.08894049e+18,2.08894049e+18,2.08894049e+18
        ,2.08894049e+18,2.08894049e+18,2.08894049e+18,2.08894049e+18
        ,2.08894049e+18,2.08894049e+18,2.08894049e+18,2.08894049e+18
        ,2.08894049e+18,2.08894049e+18,2.08894049e+18,2.08894049e+18
        ,2.08894049e+18,2.08894049e+18,2.08894049e+18,2.08894049e+18
        ,2.08894049e+18,2.08894049e+18,2.08894049e+18]
    mse_plot(mse, "JRBM_f256.png")
    mse = [0.00000000e+00,2.06524865e+18,2.10655363e+18,2.10737973e+18
        ,2.10739625e+18,2.10739658e+18,2.10739659e+18,2.10739659e+18
        ,2.10739659e+18,2.10739659e+18,2.10739659e+18,2.10739659e+18
        ,2.10739659e+18,2.10739659e+18,2.10739659e+18,2.10739659e+18
        ,2.10739659e+18,2.10739659e+18,2.10739659e+18,2.10739659e+18
        ,2.10739659e+18,2.10739659e+18,2.10739659e+18,2.10739659e+18
        ,2.10739659e+18,2.10739659e+18,2.10739659e+18,2.10739659e+18
        ,2.10739659e+18,2.10739659e+18,2.10739659e+18,2.10739659e+18
        ,2.10739659e+18,2.10739659e+18,2.10739659e+18,2.10739659e+18
        ,2.10739659e+18,2.10739659e+18,2.10739659e+18,2.10739659e+18
        ,2.10739659e+18,2.10739659e+18,2.10739659e+18,2.10739659e+18
        ,2.10739659e+18,2.10739659e+18,2.10739659e+18,2.10739659e+18
        ,2.10739659e+18,2.10739659e+18,2.10739659e+18]
    mse_plot(mse, "JRBM_f512.png")
    mse = [0.00000000e+00,2.08248532e+18,2.16578474e+18,2.16911671e+18
        ,2.16924999e+18,2.16925532e+18,2.16925554e+18,2.16925554e+18
        ,2.16925554e+18,2.16925554e+18,2.16925554e+18,2.16925554e+18
        ,2.16925554e+18,2.16925554e+18,2.16925554e+18,2.16925554e+18
        ,2.16925554e+18,2.16925554e+18,2.16925554e+18,2.16925554e+18
        ,2.16925554e+18,2.16925554e+18,2.16925554e+18,2.16925554e+18
        ,2.16925554e+18,2.16925554e+18,2.16925554e+18,2.16925554e+18
        ,2.16925554e+18,2.16925554e+18,2.16925554e+18,2.16925554e+18
        ,2.16925554e+18,2.16925554e+18,2.16925554e+18,2.16925554e+18
        ,2.16925554e+18,2.16925554e+18,2.16925554e+18,2.16925554e+18
        ,2.16925554e+18,2.16925554e+18,2.16925554e+18,2.16925554e+18
        ,2.16925554e+18,2.16925554e+18,2.16925554e+18,2.16925554e+18
        ,2.16925554e+18,2.16925554e+18,2.16925554e+18]
    mse_plot(mse, "JRBM_f1024.png")

def mse_plot(mEs, fname = "plot.png"):
    #Plot mean squared error on data within epochs
    plt.figure()
    plt.title('Mean squared error for epochs')
    plt.plot(mEs, 'b', label='Model with non-varied momentum rate')
    plt.legend()
    plt.grid()
    plt.xlabel('Epoch')
    plt.ylabel('Mean-squared weight error')
    plt.xlim(xmin=1)
    # plt.show()
    plt.savefig(fname)