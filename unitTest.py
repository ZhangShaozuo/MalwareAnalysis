from ember_data import *
import numpy as np
import unittest
import math
import time
from multiprocessing import Pool

class EmberTestCase(unittest.TestCase):
    def setUp(self):
        data_dir= "data\ember"
        ndim=2381
        fy_train_path = os.path.join(data_dir, "fy_train.dat")
        fy_train = np.memmap(fy_train_path, dtype=np.float32, mode="r")
        N1 = fy_train.shape[0]

        y_test_path = os.path.join(data_dir, "y_test.dat")
        y_test = np.memmap(y_test_path, dtype=np.float32, mode="r")
        N2 = y_test.shape[0]

        X_file=["bmmfX_train.dat","bmmX_test.dat","bstdfX_train.dat","bstdX_test.dat",
                        "mmfX_train.dat","mmX_test.dat","stdfX_train.dat","stdX_test.dat"]
        X_path, X_mem = [], []
        for i in range(len(X_file)):
            path=os.path.join(data_dir, X_file[i])
            X_path.append(path)
            if i%2==0:
                N=N1
            else:
                N=N2
            mem = np.memmap(path, dtype=np.float32, mode="r", shape=(N, ndim))
            X_mem.append(mem)
        self.bmmfX_train = X_mem[0]
        self.bmmX_test   = X_mem[1]
        self.bstdfX_train= X_mem[2]
        self.bstdX_test  = X_mem[3]
        self.mmfX_train  = X_mem[4]
        self.mmX_test    = X_mem[5]
        self.stdfX_train = X_mem[6]
        self.stdX_test   = X_mem[7]
        self.X_mem=X_mem
    def test_shape(self):
        self.assertEqual(self.bmmfX_train.shape[0], 600000)
        self.assertEqual(self.bmmX_test.shape[0],   200000)
        self.assertEqual(self.bstdfX_train.shape[0],600000)
        self.assertEqual(self.bstdX_test.shape[0],  200000)
        self.assertEqual(self.mmfX_train.shape[0],  600000)
        self.assertEqual(self.mmX_test.shape[0],    200000)
        self.assertEqual(self.stdfX_train.shape[0], 600000)
        self.assertEqual(self.stdX_test.shape[0],   200000)
    
    def test_mean(self):
        mean= [np.mean(self.stdfX_train, 0), 
                np.mean(self.stdX_test, 0)]
        mean[0]=abs(mean[0])<0.001
        mean[1]=abs(mean[1])<0.001
        self.assertSequenceEqual(mean[0].tolist(), np.ones(2381).tolist())
        self.assertSequenceEqual(mean[1].tolist(), np.ones(2381).tolist())
    
    def test_binary(self):
        stdArr = np.full(self.X_mem[0].shape, True or False, dtype=int )
        out = []
        out.append= (self.X_mem[0]==stdArr).all()
        out.append= (self.X_mem[1]==stdArr).all()
        out.append= (self.X_mem[2]==stdArr).all()
        out.append= (self.X_mem[3]==stdArr).all()

        self.assertSequenceEqual(out,[True]*4)
    
    
    def test_edge(self):
        self.assertEqual(checkMinMax(self.mmfX_train), True)
        self.assertEqual(checkMinMax(self.mmX_test), True)

    def test_minmax(self):
        maximum= np.max(self.mmfX_train, 0).tolist()+ np.max(self.mmX_test, 0).tolist()
        minimum= np.min(self.mmfX_train, 0).tolist()+ np.min(self.mmX_test, 0).tolist()
        pool=Pool(4)
        argument_iterator1 = (maximum, [True]*(len(maximum)), [2]*(len(minimum)))
        argument_iterator2 = (minimum, [False]*(len(maximum)), [2]*(len(minimum)))
        pool.imap_unordered(self.assertAlmostEqual, argument_iterator1)
        pool.close()
        pool.join()
        pool2=Pool(4)
        pool2.imap_unordered(self.assertAlmostEqual, argument_iterator2)
        pool2.close()
        pool2.join()



def checkMinMax(X):
    #this function checks whether all elements in X are within 0 and 1
    for i in range(X.shape[0]):
        for j in range(X.shape[1]):
            if (X[i,j] > 1.0001 or X[i,j]<-0.0001):
                print "Error: ", X[i,j]
                return False;
    return True

def suite():
    suite = unittest.TestSuite()
    # suite.addTest(EmberTestCase('test_shape')) #OK
    # suite.addTest(EmberTestCase('test_mean'))  #OK
    # suite.addTest(EmberTestCase('test_binary')) #Ok
    # suite.addTest(EmberTestCase('test_edge'))  #Ok
    # suite.addTest(EmberTestCase('test_minmax'))  #Ok multithread
    return suite

if __name__=='__main__':
    print "running test"
    runner = unittest.TextTestRunner()
    runner.run(suite())



    